---
alwaysApply: false
---
# 🔍 @smartscan.mdc – ADVANCED PROJECT ANALYZER & STRUCTURE OPTIMIZER

## TRIGGER COMMANDS:
- `@smartscan.mdc` → Full project analysis
- `@smartscan.mdc quick` → Fast overview scan  
- `@smartscan.mdc deep` → Deep dependency analysis
- `@smartscan.mdc structure` → Generate restructure recommendations
- `@smartscan.mdc security` → Security & best practices audit
- `@smartscan.mdc performance` → Performance bottleneck analysis

---

## 🎯 EXECUTION FLOW:

### 1. INITIALIZATION
When triggered, immediately:
1. **SCAN** all uploaded/pasted files recursively
2. **ANALYZE** file extensions, imports, exports, function calls
3. **CREATE** organized folder structure: `analysis/`
4. **GENERATE** multiple output files based on scan type

### 2. FOLDER STRUCTURE CREATED:
```
analysis/
├── scan_overview.md          # Main project map
├── dependency_graph.md       # Import/export relationships  
├── code_quality_report.md    # Issues & improvements
├── restructure_plan.md       # Suggested new organization
├── function_inventory.md     # All functions & their usage
└── security_audit.md        # Security concerns & fixes
```

---

## 📋 OUTPUT FORMATS:

### 🗺️ **scan_overview.md** (Always Generated)
```markdown
# 📊 PROJECT ANALYSIS REPORT
*Generated on: [timestamp]*
*Files Analyzed: [count] | Languages: [list]*

## 🏗️ ARCHITECTURE OVERVIEW
### Core Features Identified:
- **Authentication System** (5 files)
  - `/auth/login.js` → JWT token generation
  - `/middleware/auth.js` → Route protection
  - `/utils/hash.js` → Password encryption
  - Status: ✅ Well structured | ⚠️ Missing validation | ❌ Security issues

- **User Management** (8 files)  
  - Primary: `/controllers/userController.js`
  - Routes: `/routes/users.js`
  - Models: `/models/User.js`
  - Status: ⚠️ Scattered logic across multiple files

### 🎯 FEATURE COMPLETENESS:
- ✅ **Complete Features**: Authentication, User CRUD
- ⚠️ **Partial Features**: Email system (missing templates)
- ❌ **Broken Features**: Password reset (missing endpoints)
- 🔄 **Duplicated Logic**: User validation in 4 different files

### 📁 DIRECTORY HEALTH:
- **Well Organized**: `/models/`, `/config/`
- **Needs Attention**: `/utils/` (mixed purposes), `/helpers/` (unclear naming)  
- **Orphaned Files**: `temp.js`, `backup_old.js`, `test123.html`
- **Missing Standard Dirs**: `/tests/`, `/docs/`, `/services/`

### 🔗 DEPENDENCY WEB:
- **High Coupling**: UserController → 12 different files
- **Circular Dependencies**: auth.js ↔ userController.js  
- **Unused Dependencies**: lodash (installed but never imported)
- **Missing Dependencies**: express-validator (used but not in package.json)
```

### 🧬 **dependency_graph.md** (For Deep Scans)
```markdown
# 🕸️ DEPENDENCY RELATIONSHIP MAP

## 📈 DEPENDENCY FLOW DIAGRAM
```
[Core App] 
    ├── AuthController
    │   ├── bcrypt ✅
    │   ├── jsonwebtoken ✅  
    │   └── User Model ✅
    ├── UserController ⚠️
    │   ├── User Model ✅
    │   ├── EmailService ❌ (missing)
    │   └── ValidationUtils ⚠️ (duplicated)
```

## 🔄 CIRCULAR DEPENDENCIES (Critical Issues):
1. **auth.js ↔ userController.js**
   - Fix: Move shared logic to `/services/authService.js`
2. **routes/index.js ↔ middleware/logging.js**  
   - Fix: Use dependency injection pattern

## 🧩 FUNCTION CROSS-REFERENCE:
### validateUser()
- **Defined**: `/utils/validation.js:15`
- **Called by**: 
  - `/controllers/userController.js:45` 
  - `/routes/auth.js:23`
  - `/middleware/validation.js:8` ⚠️ (duplicate implementation)
- **Recommendation**: Consolidate into single source of truth
```

### 🔧 **code_quality_report.md** (For Quality Focus)
```markdown
# 📋 CODE QUALITY & TECHNICAL DEBT ANALYSIS

## 🚨 CRITICAL ISSUES:
### Security Vulnerabilities:
- ❌ **SQL Injection Risk**: `/controllers/userController.js:78` - Direct string concatenation
- ❌ **XSS Vulnerability**: `/views/profile.html:45` - Unescaped user input  
- ❌ **Hardcoded Secrets**: `/config/database.js:12` - Password in plain text

### Performance Bottlenecks:  
- 🐌 **N+1 Query Problem**: `/controllers/posts.js:34` - Loading users in loop
- 🐌 **Missing Indexes**: User table queries without proper indexing
- 🐌 **Large Bundle Size**: Unused imports increasing build size by 40%

## ⚠️ CODE SMELLS:
### Structural Issues:
- **God Object**: `UserController.js` (847 lines, 23 methods)
- **Dead Code**: 15 functions never called
- **Magic Numbers**: Hardcoded values throughout codebase  
- **Inconsistent Naming**: camelCase mixed with snake_case

### Maintainability Concerns:
- **No Error Handling**: 60% of functions lack try-catch
- **Missing Documentation**: 0 JSDoc comments found
- **Outdated Dependencies**: 8 packages with security vulnerabilities

## 📊 METRICS:
- **Complexity Score**: 7.8/10 (High)
- **Test Coverage**: 12% (Very Low)  
- **Documentation**: 5% (Minimal)
- **Code Duplication**: 23% (High)
```

### 🏗️ **restructure_plan.md** (Restructuring Suggestions)
```markdown
# 🏗️ RECOMMENDED PROJECT RESTRUCTURE

## 🎯 CURRENT VS PROPOSED STRUCTURE:

### ❌ Current (Problematic):
```
/
├── utils/ (mixed utilities)
├── helpers/ (unclear purpose)  
├── auth.js (single file doing everything)
├── userStuff.js (vague naming)
└── temp_files/ (development debris)
```

### ✅ Proposed (Clean Architecture):
```
/
├── src/
│   ├── controllers/     # Request handlers only
│   ├── services/        # Business logic
│   ├── models/          # Data models
│   ├── middleware/      # Express middleware
│   ├── routes/          # Route definitions
│   ├── utils/           # Pure utility functions
│   ├── config/          # Configuration files
│   └── validators/      # Input validation schemas
├── tests/
│   ├── unit/
│   ├── integration/
│   └── e2e/
├── docs/
└── scripts/
```

## 📋 MIGRATION PLAN:

### Phase 1: Critical Restructuring (Week 1)
1. **Extract Services**: Move business logic from controllers
   - Create `/services/userService.js` 
   - Create `/services/authService.js`
   - Create `/services/emailService.js`

2. **Consolidate Utilities**: 
   - Merge `/utils/` and `/helpers/` into organized `/utils/`
   - Group by purpose: validation, formatting, crypto, etc.

3. **Fix Circular Dependencies**:
   - Implement dependency injection
   - Create service interfaces

### Phase 2: Quality Improvements (Week 2)  
1. **Add Input Validation**: Implement joi or yup schemas
2. **Error Handling**: Centralized error handling middleware
3. **Security Hardening**: Fix identified vulnerabilities
4. **Add Tests**: Start with critical path coverage

### Phase 3: Optimization (Week 3)
1. **Performance**: Fix N+1 queries, add caching
2. **Documentation**: Add JSDoc comments  
3. **CI/CD**: Set up automated testing and deployment

## 🔧 AUTOMATED REFACTORING COMMANDS:
```bash
# These commands can be run to auto-restructure:
mkdir -p src/{controllers,services,models,middleware,routes,utils,config,validators}
mkdir -p tests/{unit,integration,e2e}
mkdir -p docs scripts

# Move files (examples):
mv userController.js src/controllers/
mv authUtils.js src/services/authService.js
mv validation.js src/validators/
```
```

---

## 🔄 ENHANCED FEATURES:

### 1. SMART PATTERN RECOGNITION:
- **Framework Detection**: Automatically detect React, Vue, Express, etc.
- **Architecture Pattern**: Identify MVC, Clean Architecture, microservices
- **Database Pattern**: Detect ORM usage, query patterns

### 2. INTELLIGENT SUGGESTIONS:
```markdown
## 💡 SMART RECOMMENDATIONS:

### Based on your Express.js + MongoDB stack:
1. **Add Request Validation**: Use `express-validator` for input sanitization
2. **Implement Rate Limiting**: Add `express-rate-limit` for API protection  
3. **Database Optimization**: Add indexes for frequently queried fields
4. **Error Handling**: Implement centralized error handling middleware
5. **Logging**: Add structured logging with `winston`

### Missing Best Practices:
- ❌ No environment variable validation
- ❌ No API documentation (consider Swagger)
- ❌ No database migration system  
- ❌ No monitoring/health checks
```

### 3. CONTEXT-AWARE ANALYSIS:
- **Language-Specific**: Different analysis for JS, Python, Java, etc.
- **Framework-Aware**: Tailored suggestions for detected frameworks
- **Scale-Aware**: Different advice for small projects vs enterprise applications

### 4. INTERACTIVE COMMANDS:
```markdown
## 🎮 FOLLOW-UP COMMANDS:
After initial scan, use these for deeper analysis:

- `@smartscan.focus [filename]` → Deep dive into specific file
- `@smartscan.trace [function]` → Follow function usage across codebase  
- `@smartscan.compare` → Compare with industry best practices
- `@smartscan.export` → Generate refactoring scripts
- `@smartscan.monitor` → Set up file change monitoring
```

---

## ✅ COMPLETION MESSAGE TEMPLATE:
```
🎉 **ANALYSIS COMPLETE!** 

📊 **Summary**: [X] files analyzed, [Y] issues found, [Z] improvements suggested
📁 **Results saved to**: `analysis/` folder
🎯 **Priority**: Fix [critical_count] critical issues first
⏱️ **Estimated fix time**: [time_estimate]

🚀 **Quick Actions**:
- Type `@smartscan.focus [filename]` for detailed file analysis
- Type `@smartscan.structure` to see restructuring plan  
- Type `@smartscan.export` to generate refactoring scripts

💡 **Top 3 Recommendations**:
1. [Most important fix]
2. [Second priority] 
3. [Third priority]
```

---

## 🔧 CUSTOMIZATION OPTIONS:

### Configuration Variables:
```javascript
// Add to cursor settings:
{
  "smartscan.depth": "deep|normal|quick",
  "smartscan.focus": "security|performance|structure|all",
  "smartscan.framework": "auto|express|react|vue|angular",
  "smartscan.outputFormat": "markdown|json|html",
  "smartscan.autoFix": true|false
}
```

This enhanced rule transforms a simple scanner into a comprehensive code analysis and refactoring assistant that can handle even the messiest codebases!